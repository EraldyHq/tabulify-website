---json
{
    "page_id": "0xj7xu3xdj7mvqmt3rovo"
}
---
====== Expression Generator ======


===== About =====
A ''expression generator'' is a [[column|column data generator]] that can [[generator|generate]] data created from:
  * other columns (known as ''parent columns'') 
  * by giving an ''expression (or formula)''.


===== Example =====

<unit>
With the following [[:docs:resource:generator|generator resource]]
<file yaml generator/expression--datagen.yml>
</file>
You would get the following data:
<code bash>
tabli data print generator/expression--datagen.yml@howto
</code>
<console>
</console>
</unit>
===== Syntax =====

<code yaml>
columns:
  - name: columnName
    DataGenerator:
      type: expression
      ColumnParents: 
           - columnParentName1 # variable x
           - columnParentName2 # variable y
           - ...... # variable "z", "a", "b", "c", "d","e","f"
      expression: "javascriptExpression"  # See below for example
</code>



^ Mandatory Key ^  Description ^
| ''ColumnParents'' | The column generator used in the expression | 
| ''expression'' | The expression in javascript where the parents columns maps by order to the following variables "x", "y", "z", "a", "b", "c", "d","e", "f" |

===== How to hide intermediate columns ?=====

When creating an expression generator, you may want to create columns that should not appear in the data generated.
For this purpose, you can use the ''hidden'' property.

Example:
<code yaml>
- name: columnToHide
  Hidden: true  # The column will not be added to the output.
  Description: An hidden column
  DataGenerator:
    type: entity
</code>



===== How to write Expression (Javascript) =====

Expressions are written in Javascript.


Tabulify pass the data as native javascript [[:docs:common:data_type|data type]] in the variable `x`.
You don't need to instantiate `x`, tabulify do.

If the expression depends:
  * on a second column, the variable `y` is created, 
  * on a third, the variable `z` is created
  * and so on.

Note:
  * For [[:docs:common:time|date/timestamp/time data type]], we create a [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date]] as this is the only temporal data type of javascript.
  * For all numbers (Double, Integer, ...) , we create a [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] as this is also the only number data type of javascript.

Example for ''2009/10/01'', Tabulify would create the `x` variable like this:
<code javascript>
x = new Date("2009","10","01")
</code>
And if you want the month, you expression would use [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth|getMonth]] :
<code javascript>
x.getMonth()+1
</code>




===== Snippet of expression =====



This section is showing snippet of expression (Javascript).

You can test your expression quickly with:
  * your browser (F12 > Console)
  * Node

==== Time ====



  * Month where ''x'' represents the ''date'' value of the first parent columns
<code javascript>
x.getMonth()+1 // Month
</code>
  * Month names. The below snippet use a ''date'' column as parent and lookup an array to get the month name.
<code javascript>
var monthNames = ['Jan', 'Feb', 'Maa', 'Apr', 'Mei', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']; 
monthNames[x.getMonth()]
</code>
  * Year number
<code javascript>
x.getFullYear()
</code>
==== Email ====
Email String concatenation where:
      * ''x'' would be a name from the first parent column
      * ''y'' would be a company name from the second parent column 
      * ''z'' would be a TLD domain extension (''.com'', ...)
<code javascript>
x+'@'+y+'.'+z
</code>

===== Data Type =====

The below [[:docs:common:data_type|data type]] are supported:

^ Data Type ^ Java script ^
| Integer | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Float | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Double | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Numeric | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Decimal | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Date | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date]] |
| Timestamp | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date]] |
| Varchar | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String|String]] |

