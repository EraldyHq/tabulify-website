---json
{
    "page_id": "0xj7xu3xdj7mvqmt3rovo"
}
---
====== Expression Generator ======


===== About =====
A ''expression generator'' is a [[column|column data generator]] that can [[generator|generate]] data created from:
  * other columns (known as ''parent columns'')
  * by giving an ''expression (or formula)''.


===== Example =====

<unit>
With the following [[:docs:resource:generator|generator resource]]
<file yaml generator/expression--datagen.yml>
Columns:
  - name: d_date
    comment: A date
    Type: date
    DataGenerator:
      type: sequence
  - name: d_moy
    comment: the month number in year
    Type: Integer
    DataGenerator:
      type: expression
      ColumnParents: d_date
      expression: "x.getMonth()+1"
  - name: d_year
    comment: The year number
    Type: Varchar
    Precision: 4
    DataGenerator:
      type: expression
      ColumnParents: d_date
      expression: "x.getFullYear()"


</file>
You would get the following data:
<code bash>
tabul data print generator/expression--datagen.yml@howto
</code>
<console>
d_date       d_moy   d_year
----------   -----   ------
2025-05-21       5   2025
2025-05-20       5   2025
2025-05-19       5   2025
2025-05-18       5   2025
2025-05-17       5   2025
2025-05-16       5   2025
2025-05-15       5   2025
2025-05-14       5   2025
2025-05-13       5   2025
2025-05-12       5   2025
2025-05-11       5   2025
2025-05-10       5   2025
2025-05-09       5   2025
2025-05-08       5   2025
2025-05-07       5   2025
2025-05-06       5   2025
2025-05-05       5   2025
2025-05-04       5   2025
2025-05-03       5   2025
2025-05-02       5   2025
2025-05-01       5   2025
2025-04-30       4   2025
2025-04-29       4   2025
2025-04-28       4   2025
2025-04-27       4   2025
2025-04-26       4   2025
2025-04-25       4   2025
2025-04-24       4   2025
2025-04-23       4   2025
2025-04-22       4   2025
2025-04-21       4   2025
2025-04-20       4   2025
2025-04-19       4   2025
2025-04-18       4   2025
2025-04-17       4   2025
2025-04-16       4   2025
2025-04-15       4   2025
2025-04-14       4   2025
2025-04-13       4   2025
2025-04-12       4   2025
2025-04-11       4   2025
2025-04-10       4   2025
2025-04-09       4   2025
2025-04-08       4   2025
2025-04-07       4   2025
2025-04-06       4   2025
2025-04-05       4   2025
2025-04-04       4   2025
2025-04-03       4   2025
2025-04-02       4   2025
2025-04-01       4   2025
2025-03-31       3   2025
2025-03-30       3   2025
2025-03-29       3   2025
2025-03-28       3   2025
2025-03-27       3   2025
2025-03-26       3   2025
2025-03-25       3   2025
2025-03-24       3   2025
2025-03-23       3   2025
2025-03-22       3   2025
2025-03-21       3   2025
2025-03-20       3   2025
2025-03-19       3   2025
2025-03-18       3   2025
2025-03-17       3   2025
2025-03-16       3   2025
2025-03-15       3   2025
2025-03-14       3   2025
2025-03-13       3   2025
2025-03-12       3   2025
2025-03-11       3   2025
2025-03-10       3   2025
2025-03-09       3   2025
2025-03-08       3   2025
2025-03-07       3   2025
2025-03-06       3   2025
2025-03-05       3   2025
2025-03-04       3   2025
2025-03-03       3   2025
2025-03-02       3   2025
2025-03-01       3   2025
2025-02-28       2   2025
2025-02-27       2   2025
2025-02-26       2   2025
2025-02-25       2   2025
2025-02-24       2   2025
2025-02-23       2   2025
2025-02-22       2   2025
2025-02-21       2   2025
2025-02-20       2   2025
2025-02-19       2   2025
2025-02-18       2   2025
2025-02-17       2   2025
2025-02-16       2   2025
2025-02-15       2   2025
2025-02-14       2   2025
2025-02-13       2   2025
2025-02-12       2   2025
2025-02-11       2   2025
</console>
</unit>
===== Syntax =====

<code yaml>
columns:
  - name: columnName
    DataGenerator:
      type: expression
      ColumnParents:
           - columnParentName1 # variable x
           - columnParentName2 # variable y
           - ...... # variable "z", "a", "b", "c", "d","e","f"
      expression: "javascriptExpression"  # See below for example
</code>



^ Mandatory Key ^  Description ^
| ''ColumnParents'' | The column generator used in the expression |
| ''expression'' | The expression in javascript where the parents columns maps by order to the following variables "x", "y", "z", "a", "b", "c", "d","e", "f" |

===== How to hide intermediate columns ?=====

When creating an expression generator, you may want to create columns that should not appear in the data generated.
For this purpose, you can use the ''hidden'' property.

Example:
<code yaml>
- name: columnToHide
  Hidden: true  # The column will not be added to the output.
  Description: An hidden column
  DataGenerator:
    type: entity
</code>



===== How to write Expression (Javascript) =====

Expressions are written in Javascript.


Tabulify pass the data as native javascript [[:docs:common:data_type|data type]] in the variable `x`.
You don't need to instantiate `x`, tabulify do.

If the expression depends:
  * on a second column, the variable `y` is created,
  * on a third, the variable `z` is created
  * and so on.

Note:
  * For [[:docs:common:time|date/timestamp/time data type]], we create a [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date]] as this is the only temporal data type of javascript.
  * For all numbers (Double, Integer, ...) , we create a [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] as this is also the only number data type of javascript.

Example for ''2009/10/01'', Tabulify would create the `x` variable like this:
<code javascript>
x = new Date("2009","10","01")
</code>
And if you want the month, you expression would use [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth|getMonth]] :
<code javascript>
x.getMonth()+1
</code>




===== Snippet of expression =====



This section is showing snippet of expression (Javascript).

You can test your expression quickly with:
  * your browser (F12 > Console)
  * Node

==== Time ====



  * Month where ''x'' represents the ''date'' value of the first parent columns
<code javascript>
x.getMonth()+1 // Month
</code>
  * Month names. The below snippet use a ''date'' column as parent and lookup an array to get the month name.
<code javascript>
var monthNames = ['Jan', 'Feb', 'Maa', 'Apr', 'Mei', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'];
monthNames[x.getMonth()]
</code>
  * Year number
<code javascript>
x.getFullYear()
</code>
==== Email ====
Email String concatenation where:
      * ''x'' would be a name from the first parent column
      * ''y'' would be a company name from the second parent column
      * ''z'' would be a TLD domain extension (''.com'', ...)
<code javascript>
x+'@'+y+'.'+z
</code>

===== Data Type =====

The below [[:docs:common:data_type|data type]] are supported:

^ Data Type ^ Java script ^
| Integer | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Float | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Double | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Numeric | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Decimal | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number]] |
| Date | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date]] |
| Timestamp | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date]] |
| Varchar | [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String|String]] |

