---json
{
    "aliases": [
        { "path": ":docs:conf:variable_file" },
        { "path": ":docs:connection:vault" }
    ],
    "low_quality_page": "false",
    "page_id": "tolx54t1e4mfb0i75vixb"
}
---
====== Tabulify - Configuration Vault (.tabul.yml) ======


===== About =====
The ''configuration vault'' is a [[docs:conf:conf|configuration file]] named ''.tabul.yml'' that stores:

  * [[..:connection:connection|connections]]
  * and [[env|global env parameters]]


===== Location =====

By default:
  * the file is searched recursively from the working directory
  * if not found, the path is in the user ''%%$HOME\.tabul%%'' directory.


You can get the location of the configuration vault with the [[docs:tabul:env:list|variable list command]].
<unit>
<code bash>
tabul env list conf
</code>
<console>
attribute   value                              origin    description
---------   --------------------------------   -------   ------------------------
CONF        /home/tabulify/.tabul/.tabul.yml   Default   The conf vault file path
</console>
</unit>



===== Cli Command =====

Advanced user will modify the file directly with a text editor but
for convenience, we provide also:

  * the [[docs:tabul:connection:start|Tabul Connection module]]
  * the [[docs:tabul:env:start|Tabul Env module]]


In every [[docs:tabul:tabul|tabul command]], you can specify the location of this file with:

  * the ''%%--conf%%'' [[docs:tabul:global|global option]].
  * or the ''TABUL_CONF'' [[docs:conf:os|OS environment variable]]


===== Secret =====

The configuration vault supports [[docs:conf:secret|secrets]] as value.


You can:
  * encrypt any value with [[docs:tabul:vault:encrypt|vault encrypt]]
  * or define environment variables as value
===== Format =====


<code yaml .tabul.yml>
# List of global attributes
env:
  key1: value
  key2: value
# List of connections
connections:
  connectionName1:
    # uri
    uri: uri
    # description
    description: description
    # user
    user: user
    # password
    password: ${MY_PASSWORD}
    # Native Driver extra attributes
    natives:
      # for example, for jdbc sql driver
      applicationName: myName
  connectionName2:
    uri: xxx
</code>





