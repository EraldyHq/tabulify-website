---json
{
    "aliases": [
        { "path": ":docs:connection:attribute" },
        { "path": ":docs:connection:variable" }
    ],
    "page_id": "f1t46y4qr9efw7xob0gyv"
}
---
====== Connection - Attributes (Parameters) ======



A ''connection attribute'' is a [[docs:conf:attribute|attribute]] of a [[connection|connection]].


===== Parameter =====

The connection attribute of type parameters:
  * define how to connect to a [[docs:system:system|system connection]] via its [[uri|URI attribute]]
  * and configure the behavior of this connection.


The only mandatory parameter variable is the [[uri|URI]].


[[#base parameters|Base parameters]] are parameters used for all connections.
Each connection type has its own parameters variable.


===== Management =====

==== See ====
You can see the [[docs:conf:attribute|attributes]] of your connection with the [[docs:tabli:connection:info|connection info command]].

==== Set ====

You can set connection parameters:
  * by editing manually the [[..:conf:vault|configuration vault]]
<code yaml>
connections:
  connectionName:
    parameter1: value1
</code>
  * with the [[docs:tabli:connection:upsert|connection upsert command]].
  * with a [[docs:conf:os|operating system variable]]
<code bash>
export TABLI_CONNECTION_{{connection_Name}_{{parameter}=value
</code>

Note: if you use a camel case connection name, you need to add an underscore `_` because of the [[:docs:conf:attribute#case_independent_sensitivity|name case independency]]
Example with the name `connectionName`, you need to use the following environment variable
<code bash>
export TABLI_CONNECTION_CONNECTION_NAME_PARAMETER1=value1
</code>






===== Base Parameters =====

''Base Connection Attribute'' are [[attribute|connection attributes]] available to all ''connections''.


^ Name ^ Description ^
| ''URI'' | The connection URI |
| ''COMMENT'' | A connection description |
| ''USER'' | The user |
| ''PASSWORD'' | The password |
| ''HOST'' | The host (derived from the env and if absent from URI) |
| ''PORT'' | The port (derived from the env and if absent from URI) |
| ''DATE_DATA_TYPE'' | Define the text storage format of a ''Date'' data type (''YYYY-MM-DD'') if not supported by the connection . See [[docs:common:time|Time storage]] |
| ''TIMESTAMP_DATA_TYPE'' | Define the text storage format of a ''Timestamp'' data type (''YYYY-MM-DD HH:MM:SS'') if not supported by the connection . See [[docs:common:time|Time storage]] |
| ''TIME_DATA_TYPE'' | Define the text storage format of a ''Time'' data type (''HH:MM:SS'') if not supported by the connection . See [[docs:common:time|Time storage]] |
| ''BOOLEAN_DATA_TYPE'' | Define the text storage format of a ''Boolean''. See [[docs:common:boolean|boolean]] if not supported by the connection |
| ''VARCHAR_DEFAULT_PRECISION'' | Define the [[#varchar_default_precision|default precision of a Varchar]] |
| ''MAX_NAME_IN_PATH'' | The maximum name in a path (for instance, Sqlite supports only one) |
| ''MAX_CONCURRENT_THREAD'' | The maximum number of concurrent thread for the connection (for instance, Sqlite supports only one) |
| ''NATIVES'' | The [[docs:connection:natives|native driver connection properties]] as map of key value (jdbc driver properties, ...) |



Derived: You can't change it

^ Name ^ Description ^
| ''ORIGIN'' | The origin of the connection data (ie [[docs:connection:built-in|built-in]] or user) |


==== VARCHAR_DEFAULT_PRECISION ====

Not data system are alike and handle data differently. 

By default, when creating a data resource, if no precision (ie [[:docs:common:data_type|data type length]]) is specified, we use the maximum allowed. Unfortunately, [[:docs:system:mysql:text#varchar_default_precision_of_2000|handling of MySql]] makes it difficult to use this rule.

That's why this attribute was introduced. With this attribute you can define the default precision applied when no precision is specified for a `varchar`
