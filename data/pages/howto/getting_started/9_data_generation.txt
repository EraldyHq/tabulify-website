---json
{
    "page_id": "ognjto9n01l621jzyrzrq"
}
---
====== Learning Tabulify - Step 9 - How to fill a data resource with generated data ? ======


===== Data Generation =====
''Tabulify'' integrates natively a [[docs:generator:generator|data generator]].

You can generate realistic production data and start working on your project right away.


<note tip>
Because the data is fake but realistic, you don't need to:
  * anonymize production data in your development environment because of the privacy laws
  * or create any acceptance environment.
</note>


===== The fill command =====

The [[docs:op:fill|data fill operation]] is an operation that will [[docs:op:select|select target data resource]] and fill them with data.

''Tabulify'' supports two mode:
  * [[#auto fill|auto]] - the data generated is automatically chosen
  * [[#generator|generator]] - the data generated is defined in a file called the ''generator''

The [[docs:op:fill|fill operation]] is supported by the [[docs:tabul:data:fill|data fill command]].

===== Auto Fill =====

Let's first delete all data with the [[docs:tabul:data:truncate|data truncate command]] to get a clean schema.
<unit >
<code bash>
tabul data truncate *@sqlite
</code>
</unit>

The below [[docs:tabul:data:fill|fill command]] will fill all [[docs:resource:table|tables]] with auto-generated data

<unit >
<code bash>
tabul data fill *@sqlite
</code>

<console>
Source                          Target                          Latency (ms)   Row Count   Error   Message
-----------------------------   -----------------------------   ------------   ---------   -----   -------
call_center@memgen              call_center@sqlite              20             100                 
catalog_page@memgen             catalog_page@sqlite             10             100                 
catalog_sales@memgen            catalog_sales@sqlite            19             100                 
customer@memgen                 customer@sqlite                 19             100                 
customer_address@memgen         customer_address@sqlite         15             100                 
customer_demographics@memgen    customer_demographics@sqlite    14             100                 
date_dim@memgen                 date_dim@sqlite                 19             100                 
household_demographics@memgen   household_demographics@sqlite   9              100                 
income_band@memgen              income_band@sqlite              9              100                 
item@memgen                     item@sqlite                     50             100                 
promotion@memgen                promotion@sqlite                12             100                 
ship_mode@memgen                ship_mode@sqlite                10             100                 
store@memgen                    store@sqlite                    17             100                 
store_sales@memgen              store_sales@sqlite              14             100                 
time_dim@memgen                 time_dim@sqlite                 12             100                 
warehouse@memgen                warehouse@sqlite                16             100                 
web_page@memgen                 web_page@sqlite                 11             100                 
web_sales@memgen                web_sales@sqlite                18             100                 
web_site@memgen                 web_site@sqlite                 17             100
</console>
</unit>

<note>
The [[docs:tabul:data:fill|data fill command]] loads ''1000'' records for each [[docs:resource:table|table]] because this is the default value of the  [[docs:generator:max-record-count|max-record-count]] [[docs:tabul:option|option]] ( This option defines the number of records generated ).
</note>


===== Query 11 =====

By running the [[howto:getting_started:7_query|query 11 (of the query lesson)]], we don't get any data back.
<unit >
<code bash>
tabul data print '(sqlite/query_11.sql@tpcds_query)@sqlite'
# The quotes are only mandatory in bash because parenthesis are a bash token (ie subshell)
</code>
<console>
customer_id   customer_first_name   customer_last_name   customer_email_address
-----------   -------------------   ------------------   ----------------------

</console>
</unit>

Why ? Because the [[howto:getting_started:7_query|query 11]] is based on time data of the year ''2001'' and unfortunately the auto-generated data does not contain ''2001'' in the ''d_year'' column.

<unit >
<code bash>
tabul data head --limit 10 date_dim@sqlite
</code>
<console>
The first 10 rows of the data resource (date_dim@sqlite):
d_date_sk   d_date_id   d_date       d_month_seq   d_week_seq   d_quarter_seq   d_year   d_dow   d_moy   d_dom   d_qoy   d_fy_year   d_fy_quarter_seq   d_fy_week_seq   d_day_name   d_quarter_name   d_holiday   d_weekend   d_following_holiday   d_first_dom   d_last_dom   d_same_day_ly   d_same_day_lq   d_current_day   d_current_week   d_current_month   d_current_quarter   d_current_year
---------   ---------   ----------   -----------   ----------   -------------   ------   -----   -----   -----   -----   ---------   ----------------   -------------   ----------   --------------   ---------   ---------   -------------------   -----------   ----------   -------------   -------------   -------------   --------------   ---------------   -----------------   --------------
        1   a           2025-06-02             9            0               0        2       9       3       2       7           1                  2               2   z            j                p           j           g                               5            6               8               7   x               j                k                 m                   d
        2   b           2025-05-29             9            9               0        3       8       2       0       0           4                 10               7   o            g                y           s           c                               4            5               5               4   b               q                d                 s                   y
        3   c           2025-06-06            10            3               1        8       5       2       3       8           4                  1               9   b            a                c           o           x                               3            9              10               0   e               t                h                 o                   f
        4   d           2025-06-03             7           10              10        7       9       1       8       3           0                  9               7   e            m                w           t           d                               4            3               9               4   x               a                v                 r                   l
        5   e           2025-06-02             2            1               9        5       8       9       4       9           4                  4               3   c            j                d           s           w                              10            3               8               8   w               r                g                 p                   f
        6   f           2025-06-04             0            5               7        5       4       1      10       1           7                  2               0   u            y                p           e           l                               7            2               2               4   i               v                a                 d                   z
        7   g           2025-06-01             9            1               3        5       0       7       6       5           5                  6               7   b            k                w           j           a                               5            1               3               2   q               t                m                 v                   g
        8   h           2025-06-06             7            0               7        7       9       8       2       6           6                  5               0   m            n                s           g           i                              10            2               3               1   q               i                j                 x                   j
        9   i           2025-05-31             7            5               5        5       1       1      10       7           2                  3               3   f            e                s           g           x                               6            1               8               1   n               l                u                 x                   v
       10   j           2025-05-28             1            4               0       10       1       4       6       7           6                  5               9   a            u                n           g           k                               1            3               1               8   o               n                s                 k                   x
</console>
</unit>

To update the column ''dyear'' with data from the year ''2001'', we will use a [[#generator|generator]] in the next section.

===== Generator =====

A [[docs:resource:generator|generator]] is a [[docs:resource:file|file]] that contains the data generation definition.

For each column, a [[docs:generator:column|column data generator]] is defined that control the data generated.

The below [[docs:resource:generator|generator]] generates one year of data with two columns:
  * ''d_date'' that has a [[docs:generator:sequence|date sequence generator]] to generate ''date'' data from ''2001-01-01'' and upwards
  * ''dyear'' that has a [[docs:generator:expression|expression generator]] that extracts the ''year'' of the ''d_date'' column.

<unit>
<file yaml date_dim_2001--datagen.yml>
LogicalName: date_dim
Columns:
  - name: d_date
    type: date
    comment: A column with a sequence generator that generates a date sequence from 2001-01-01 and after
    DataGenerator:
      type: sequence
      start: 2001-01-01
      step: 1
  - name: d_year
    type: integer
    precision: 4
    comment: A column with a expression generator that extracts the year from the date column
    DataGenerator:
      type: expression
      ColumnParents: d_date
      expression: "x.getFullYear()"

</file>
</unit>

This [[docs:resource:generator|generator]] is also a [[docs:resource:content|content resource]] and therefore you can use it as any [[docs:resource:tabular|tabular resource]] and take a look at the data generated

<unit>
<code bash>
tabul data head date_dim_2001--datagen.yml@howto
</code>
<console>
The first 10 rows of the data resource (date_dim_2001--datagen.yml@howto):
d_date       d_year
----------   ------
2001-01-01     2001
2001-01-02     2001
2001-01-03     2001
2001-01-04     2001
2001-01-05     2001
2001-01-06     2001
2001-01-07     2001
2001-01-08     2001
2001-01-09     2001
2001-01-10     2001
</console>
</unit>

===== Fill with generators =====

After having created a generator for the ''date_dim'' [[docs:resource:table|table]], we can pass it to the [[docs:tabul:data:fill|data fill command]] with the ''--generator-selector'' option to make the data generation more controled.
<unit >
<code bash>
tabul data fill --generator-selector date_dim_2001--datagen.yml@howto   *@sqlite
</code>
<note>
As the option ''generator-selector'' is a [[docs:resource:selector|resource selector]], you can create a [[docs:resource:generator|generator]] for each table where you want to customize the generated data and select them with the [[docs:common:globbing|glob pattern]].
</note>
Output:
<console>
Source                          Target                          Latency (ms)   Row Count   Error   Message
-----------------------------   -----------------------------   ------------   ---------   -----   -------
call_center@memgen              call_center@sqlite              21             100                 
catalog_page@memgen             catalog_page@sqlite             7              100                 
catalog_sales@memgen            catalog_sales@sqlite            29             100                 
customer@memgen                 customer@sqlite                 15             100                 
customer_address@memgen         customer_address@sqlite         11             100                 
customer_demographics@memgen    customer_demographics@sqlite    15             100                 
date_dim@memgen                 date_dim@sqlite                 209            100                 
household_demographics@memgen   household_demographics@sqlite   9              100                 
income_band@memgen              income_band@sqlite              8              100                 
item@memgen                     item@sqlite                     54             100                 
promotion@memgen                promotion@sqlite                12             100                 
ship_mode@memgen                ship_mode@sqlite                7              100                 
store@memgen                    store@sqlite                    18             100                 
store_sales@memgen              store_sales@sqlite              15             100                 
time_dim@memgen                 time_dim@sqlite                 10             100                 
warehouse@memgen                warehouse@sqlite                16             100                 
web_page@memgen                 web_page@sqlite                 11             100                 
web_sales@memgen                web_sales@sqlite                17             100                 
web_site@memgen                 web_site@sqlite                 17             100
</console>
</unit>

And the ''query 11'' is now giving back a result. The generated data is minimal and should be further defined.

<unit >
<code bash>
tabul data print '(sqlite/query_11.sql@tpcds_query)@sqlite'
# The quotes are only mandatory in bash because parenthesis are a bash token (ie subshell)
</code>

<console>
customer_id   customer_first_name   customer_last_name   customer_email_address
-----------   -------------------   ------------------   ----------------------
</console>
</unit>

===== Next =====
Learn how to compare data resource.

<btn>
[[10_resource_comparison|Data Resource Comparison]]
</btn>
